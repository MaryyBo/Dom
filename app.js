const btn = document.querySelector('#btn');
btn.addEventListener('click', clickHandler);

// function clickHandler (event) {
// // console.log('На кнопку клікнули');

// }

// //Як працюють обробники - наприклад 'click' ????

// function sum (a, b) {
//     let i = 5; // Браузер візьми область пам'яті, яка тобі доступна в операційній системі, і виділи простір для цієї примітивної змінної
//      if (i > 10)
//     // debugger; // debugger не користуються в js, це роблять через console.log
//     return a + b;
// }

// console.log(sum(2,2));

/*Асинхронність, це обробник подій, ми не знаемо коли користувач натисне на кнопку, або взагалі не натисне
Якби не асинхронність ми б не мали б можливості реагувати на події тоді, коли вони стаються
Якщо станеться подія кліку, то запусти ось такий то клік хендлер, WEB API (браузер) починає слухати подію,
нібито паралельно, коли подія стається подія переміщується спочатку в чергу, далі чекаємо, поки стек буде повністю пустий
коли стек пустий, всі задачі там виконаються, то туди заходить наша задача в черзі.
Між чергою і стеком є EVENT LOOP (роль адміністратор) він переміщає задачу з черги в стек.

EVENT LOOP - механізм, який буде керувати виконанням коду (він працює у фоні) - віртуальний цикл який дедосить, перевіряєчергу

Ідея EVENT LOOP полягає в тому, щоб не заблокувати основний потік данихї
Технічно ця концепція реалізується через Google Chrome, який написаний на С++
*/
function clickHandler (event) {
    console.log('BUTTON')
    }

